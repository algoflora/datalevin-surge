{:uuid #uuid "00000000-0000-0000-0000-000000000003"
 :parent #uuid "00000000-0000-0000-0000-000000000002"

 :up {:stage-fn (fn [conn]
                  (into {} (datalevin.core/q (quote [:find ?p ?a
                                                     :where [?p :person/account ?a]])
                                             (datalevin.core/db conn))))
      :schema-remove [:person/account]
      :schema-insert {:person/accounts {:db/valueType :db.type/ref
                                        :db/cardinality :db.cardinality/many}}

      :unstage-fn (fn [conn stage]
                    (datalevin.core/transact!
                     conn
                     (mapcat (fn [[pid aid]]
                               (let [aid-2 (+ 2 aid)
                                     amount (datalevin.core/q '[:find ?am
                                                                :where
                                                                [aid :account/amount ?am]] (datalevin.core/db conn))]
                                 [{:db/id aid
                                   :account/amount 5000.00M}
                                  {:db/id aid-2
                                   :account/uuid (random-uuid)
                                   :account/amount (- amount 5000.00M)}
                                  {:db/id pid
                                   :person/accounts [aid aid-2]}])) stage)))}

 :down {:stage-fn (fn [conn]
                    (let [mf (fn [x y]
                               (cond
                                 (vector? x)  (conj x y)
                                 (decimal? x) (+ x y)
                                 :else (conj [x] y)))]
                      (reduce (fn [a [pid acc am]]
                                (update a pid (fn [m]
                                                (merge-with mf m {:accounts acc
                                                                  :amount am}))))
                              {}
                              (datalevin.core/q (quote [:find ?p ?acc ?am
                                                        :where
                                                        [?p :person/accounts ?acc]
                                                        [?acc :account/amount ?am]]) (datalevin.core/db conn)))))
        :schema-remove [:person/accounts]
        :schema-insert {:person/account {:db/valueType :db.type/ref
                                         :db/cardinality :db.cardinality/one}}
        :unstage-fn (fn [conn stage]
                      (datalevin.core/transact!
                       conn (mapcat (fn [[pid {:keys [accounts
                                                      amount]}]]
                                      (let [main-account (apply min accounts)
                                            aux-account (apply max accounts)]
                                        [[:db/retractEntity aux-account]
                                         {:db/id pid
                                          :person/account main-account}
                                         {:db/id main-account
                                          :account/amount amount}])) stage)))}}
